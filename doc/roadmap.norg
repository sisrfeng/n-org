@document.meta
	title: Neorg Roadmap
	description: Neorg Official Roadmap
	author: The Neorg-community
	categories: docs
	created: 2021-09-11
	version: 0.1
@end

* The Neorg Roadmap
What's going on behind the scenes? What has been done? Where are we heading next? It's all described
here. For a better viewing experience, we recommend reading it opening it from `:h neorg-roadmap`.

 ** PR Stuff
    For starters, everything must be set up in order to make the project comprehensible by the
    everyday user. This will include writing this very roadmap and writing the github wiki.

    The github wiki will consist of:
    - [x] Detailed instructions to install and configure neorg
    - [x] Documentation for pulling modules from github/interacting with modules
    - [x] Documentation for existing core modules

    More will be added to this wiki as neorg grows larger and larger.

 ** Road to 0.1 release
    After the PR things are out of the way, the development of Neorg 0.1 will commence.
    The 0.1 release will be the equivalent of the MVP (Minimal Viable Product). This release will be
    the one where neorg is stable enough to be used in extreme situations and to perform basic neorg
    tasks like adding headings and maybe tangling. Here is where you will see the initial
    introduction of the .norg file format.

  *** Things to be done in this release:

   **** Backend
        - [x] Implement a new feature for the return value of the `module.setup()` function - `replaces`.
        Example usage:

        @code lua
            module.setup = function()
                return { success = true, replaces = "core.neorgcmd" }
            end
        @end

        This will tell neorg to *replace* the core.neorgcmd module with this one. Should be
        obviously used with caution, but may prove very useful in the future for hotswapping modules
        with a small tradeoff in terms of stability.
        Have no clue what the above code snippet does and want to learn? Read the
        {https://github.com/vhyrro/neorg/wiki/Creating-Modules}[CREATING_MODULES.md document].
        - [x] Fix a bug in `core.keybinds`, where it's currently impossible to bind a certain event
              to a *new* keybind.
        - [x] Allow the default `<Leader>o` keybind to be remapped and allow the user to add a
              special flag in order to automatically prefix their keybind with it.
        - [x] Add custom modes to neorg - take neovim's modal design and take it to its limit. Modes
              will be primarily used to isolate keybindings from each other, but will also allow
              modules to perform different tasks based on the mode.
        - [x] Implement metamodules. These modules will be an easy way to `require` a large batch of
              modules without the user having to specify each individual module they prefer. For
              example, a `default` metamodule may exist in order to include all the basic modules
              that neorg has to efficiently edit norg files.
        - [x] Implement a Treesitter parser
        -- [x] Syntax highlight
        -- [x] Indentation engine
        - [x] Telescope.nvim plugin to interact with `core.norg.dirman` and fuzzy find .norg files etc.
        - [x] Asynchronous module loading - on the surface this seems very trivial, but I have
              encountered a problem I cannot find a solution to online. The module loader uses
              `pcall()` to require the modules (in case they don't exist), but the problem is pcall
              just does not work asynchronously, no matter what I tried. Until a fix isn't found for
              this, async module loading will not be a possibility. I might be just dumb though in
              which case let me know how to fix it :)
              (*DONE* 2021-05-03 | Migrated over to plenary.nvim, all works awesome now)
        - [x] Add more API functions. These functions will just allow any module to more easily
              interact with the environment around them; some quality-of-life stuff.
        - [x] Create `module.queries.native` in order to play around with the norg content (from Treesitter).

   **** Default modules
    ***** Basics
          - [x] Create a `core.neorgcmd` module. This module will allow the use of the `:Neorg`
                command and will allow other modules to define their own custom functions to be
                executed in this command, e.g. `:Neorg my_custom_command`. Default commands will be
                `:Neorg list modules` (VERY BASIC, will be remastered soon) to list currently loaded
                modules. More will be added in the future.
          - [x] Create the wiki/docs for `core.neorgcmd`
          - [x] Implement a `core.norg.concealer` module - this module will make the experience much
                more aesthetically pleasing by using icons for bits of text rather than raw text itself.
          - [x] Allow todo items to be checked, unchecked and marked as pending with a keybind.
          - [x] Extend functionality of metamodules, allow individual modules from a metamodule to be
                selectively disabled.
          - [x] Module to manage directories where .norg files can be stored (`core.norg.dirman`).
          - [x] Create an nvim-compe (and nvim-cmp) completion source
          - [x] Add a module for efficiently managing and manipulating vim windows, be it splits,
                floating windows etc.
          - [x] Create the basics of ui components (selection popups, input prompts)

   **** External Modules
        - [x] Allow the installation of modules from github using `:Neorg install some/address`
        - [x] Allow all community modules to be updated with `:Neorg update modules`
        - [x] Allow the user to change the community module directory

        *NOTE:* This integration was scrapped in favour of utilizing your Neovim plugin manager.
        We shouldn't be doing the heavy lifting.

   **** Documentation
        - [x] Start working on a basic "specification" for the .norg file format. The name of this
              file format will be NFF-0.1 (Neorg File Format 0.1). The community will be asked about
              what they think before the specification is pushed (join the
              {https://discord.gg/T6EgTAX7ht}[discord] if you haven't already).
        - [x] Make fancy README
        - [x] Create the .norg spec. The goal is as little ambiguity and as
              much predictability as possible.

   **** Performance
        Currently the performance of Neorg is "ok". In certain circumstances Neorg can end up
        slowing down the editor quite a lot.
    ***** Conceals
          To fix the conceal performance Neovim needs to do one of two things:
          - [ ] Merge {https://github.com/neovim/neovim/pull/15658}[this pull request]. It would
                allow to us to run several tasks in an actual asynchronous manner.
                Would reduce slowdown.
          - [ ] Fix a bug where undoing a range of text doesn't trigger `vim.api.nvim_buf_attach`
                callbacks. If this were fixed we would be able to simply update the changed region
                of text instead of reparsing the whole buffer.

   **** Bugs
        - [ ] Make `core.keybinds` use `vim.api.nvim_buf_set_keymap` instead of applying global
        keymaps

   **** GTD (Getting things done) integration (GTD docs with :h neorg-gtd)
        - [x] Create a full GTD specification
        - [x] Create a `gtd.base` module. This will allow us to query all tasks and project
              information from a GTD workspace.
        - [x] Aggregate and display tasks and projects by context, due dates, etc
        - [x] Quick Capture popup: create a task/project and add metadata to it
        - [x] Quick Actions popup: view your tasks and projects nicely aggregated
        - [x] Quick Modify popup: modify a task/project already in the workspace

 ** Plans after 0.1
    > Ok that's pretty cool, so after 0.1 I should be at least able to do some basic stuff, right?
    > What's next though?

    - [ ] Add more literate programming features
    - [ ] Make more things bound to a keybind, this is neovim damnit. Most keybinds will be bound under
          `<Leader>o` for "organization" by default (this main neorg leader will be able to be changed).
    - [ ] Add more features to the `:Neorg` command, like a fully-fledged module manager inside a floating window
    - [ ] Add the ability to upgrade .org documents and downgrade .norg documents to their respective formats.
    - [ ] Add fancy UI elements for the true user experience

  *** New GTD features
      - [ ] Clarify Popup: helps the user in the process of the GTD clarify step (see `:h neorg-gtd-clarify`)
      - [ ] Add support for recurring actions, and update the GTD specs
      - [ ] Add support for sequential projects (see `:h neorg-gtd-projects`)
      - [ ] Add support for the daily and weekly review (see `:h neorg-gtd-reflect`)
#comment
vim:tw=100:ft=norg:norl:
